<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Doodle Labeller (Doodler) Blog</title>
        <link>https://dbuscombe-usgs.github.io/doodle_labeller/blog</link>
        <description>The best place to stay up-to-date with the latest Doodle Labeller (Doodler) news and events.</description>
        <lastBuildDate>Sat, 01 Aug 2020 06:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>Doodle Labeller (Doodler) Blog</title>
            <url>https://dbuscombe-usgs.github.io/doodle_labeller/img/favicon.ico</url>
            <link>https://dbuscombe-usgs.github.io/doodle_labeller/blog</link>
        </image>
        <copyright>Copyright Â© 2020 Marda Science, LLC</copyright>
        <item>
            <title><![CDATA[Splitting up large geoTIFF orthomosaics]]></title>
            <link>https://dbuscombe-usgs.github.io/doodle_labeller/blog/2020/08/01/blog-post.html</link>
            <guid>https://dbuscombe-usgs.github.io/doodle_labeller/blog/2020/08/01/blog-post.html</guid>
            <pubDate>Sat, 01 Aug 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p><code>Doodler</code> can work with really large images, but it is usually best to keep your images &lt; 10,000 pixels in any dimension, because then the program will do CRF inference on the whole image at once rather than in chunks. This usually results in better...</p>]]></description>
        </item>
        <item>
            <title><![CDATA[merge a 3-band and 1-band image]]></title>
            <link>https://dbuscombe-usgs.github.io/doodle_labeller/blog/2020/07/31/blog-post.html</link>
            <guid>https://dbuscombe-usgs.github.io/doodle_labeller/blog/2020/07/31/blog-post.html</guid>
            <pubDate>Fri, 31 Jul 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p><code>Doodler</code> can use 1, 3, and 4-band input imagery. If the imagery is 3-band, it is assumed to be RGB and is, by default, augmented with 3 additional derivative bands.</p> <p>But how do you make a 4-band image from a 3-band image and a 1-band image?</p> <p>That additi...</p>]]></description>
        </item>
        <item>
            <title><![CDATA[no spaces in filenames!]]></title>
            <link>https://dbuscombe-usgs.github.io/doodle_labeller/blog/2020/07/30/blog-post.html</link>
            <guid>https://dbuscombe-usgs.github.io/doodle_labeller/blog/2020/07/30/blog-post.html</guid>
            <pubDate>Thu, 30 Jul 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>Spaces in image file names are problematic for the program because it uses filename string subsections to match images to outputs. White space is the escape character for most programming languages.</p> <p>A one-liner for replacing white spaces with undersc...</p>]]></description>
        </item>
        <item>
            <title><![CDATA[batch "redoing"]]></title>
            <link>https://dbuscombe-usgs.github.io/doodle_labeller/blog/2020/07/29/blog-post.html</link>
            <guid>https://dbuscombe-usgs.github.io/doodle_labeller/blog/2020/07/29/blog-post.html</guid>
            <pubDate>Wed, 29 Jul 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>If you want to redo all your previous doodles with the new doodler, put all your images in data/images and put the npy files in data/label_images. Then you can call doodler like this in a loop:</p> <pre><code class="hljs"><span class="hljs-keyword">for</span> <span class="hljs-keyword">file</span> in data/label_images/*.npy <span class="hljs-keyword">do</span> <span class="hljs-keyword">python</span> doodler.<span class="hljs-keyword">py...</span></code></pre>]]></description>
        </item>
    </channel>
</rss>